eclipse.preferences.version=1
org.eclipse.jdt.ui.javadoc=false
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\r\n * @return the ${bare_field_name}\r\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\r\n * @param ${param} the ${bare_field_name} to set\r\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\r\n * ${tags}\r\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\r\n * \r\n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\r\n * @author ${user}\r\n *\r\n * ${tags}\r\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\r\n * \r\n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\r\n * ${tags}\r\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\r\n * ${see_to_overridden}\r\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\r\n * ${tags}\r\n * ${see_to_target}\r\n */</template><template autoinsert\="true" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">${filecomment}\r\n${package_declaration}\r\n\r\n${typecomment}\r\n${type_declaration}</template><template autoinsert\="false" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">import java.io.*;\r\nimport java.util.InputMismatchException;\r\n\r\n/**\r\n * Created by Shreyans on {date} at {time} using Eclipse (Fast IO Template)\r\n */\r\n\r\nclass ${file_name}\r\n{\r\n    public static void main(String[] args) throws Exception\r\n    {\r\n        InputReader in \= new InputReader(System.in);\r\n        OutputWriter out \= new OutputWriter(System.out);\r\n        \r\n        {\r\n            out.close();\r\n        }  \r\n    }\r\n\r\n    //FAST IO\r\n    private static class InputReader\r\n    {\r\n        private InputStream stream;\r\n        private byte[] buf \= new byte[1024];\r\n        private int curChar;\r\n        private int numChars;\r\n        private SpaceCharFilter filter;\r\n\r\n        public InputReader(InputStream stream)\r\n        {\r\n            this.stream \= stream;\r\n        }\r\n\r\n        public int read()\r\n        {\r\n            if (numChars \=\= -1)\r\n                throw new InputMismatchException();\r\n            if (curChar &gt;\= numChars)\r\n            {\r\n                curChar \= 0;\r\n                try\r\n                {\r\n                    numChars \= stream.read(buf);\r\n                } catch (IOException e)\r\n                {\r\n                    throw new InputMismatchException();\r\n                }\r\n                if (numChars &lt;\= 0)\r\n                    return -1;\r\n            }\r\n            return buf[curChar++];\r\n        }\r\n\r\n        public int readInt()\r\n        {\r\n            int c \= read();\r\n            while (isSpaceChar(c))\r\n                c \= read();\r\n            int sgn \= 1;\r\n            if (c \=\= '-')\r\n            {\r\n                sgn \= -1;\r\n                c \= read();\r\n            }\r\n            int res \= 0;\r\n            do\r\n            {\r\n                if (c &lt; '0' || c &gt; '9')\r\n                    throw new InputMismatchException();\r\n                res *\= 10;\r\n                res +\= c - '0';\r\n                c \= read();\r\n            } while (\!isSpaceChar(c));\r\n            return res * sgn;\r\n        }\r\n\r\n        public String readString()\r\n        {\r\n            int c \= read();\r\n            while (isSpaceChar(c))\r\n                c \= read();\r\n            StringBuilder res \= new StringBuilder();\r\n            do\r\n            {\r\n                res.appendCodePoint(c);\r\n                c \= read();\r\n            } while (\!isSpaceChar(c));\r\n            return res.toString();\r\n        }\r\n\r\n        public double readDouble()\r\n        {\r\n            int c \= read();\r\n            while (isSpaceChar(c))\r\n                c \= read();\r\n            int sgn \= 1;\r\n            if (c \=\= '-')\r\n            {\r\n                sgn \= -1;\r\n                c \= read();\r\n            }\r\n            double res \= 0;\r\n            while (\!isSpaceChar(c) &amp;&amp; c \!\= '.')\r\n            {\r\n                if (c \=\= 'e' || c \=\= 'E')\r\n                    return res * Math.pow(10, readInt());\r\n                if (c &lt; '0' || c &gt; '9')\r\n                    throw new InputMismatchException();\r\n                res *\= 10;\r\n                res +\= c - '0';\r\n                c \= read();\r\n            }\r\n            if (c \=\= '.')\r\n            {\r\n                c \= read();\r\n                double m \= 1;\r\n                while (\!isSpaceChar(c))\r\n                {\r\n                    if (c \=\= 'e' || c \=\= 'E')\r\n                        return res * Math.pow(10, readInt());\r\n                    if (c &lt; '0' || c &gt; '9')\r\n                        throw new InputMismatchException();\r\n                    m /\= 10;\r\n                    res +\= (c - '0') * m;\r\n                    c \= read();\r\n                }\r\n            }\r\n            return res * sgn;\r\n        }\r\n\r\n        public long readLong()\r\n        {\r\n            int c \= read();\r\n            while (isSpaceChar(c))\r\n                c \= read();\r\n            int sgn \= 1;\r\n            if (c \=\= '-')\r\n            {\r\n                sgn \= -1;\r\n                c \= read();\r\n            }\r\n            long res \= 0;\r\n            do\r\n            {\r\n                if (c &lt; '0' || c &gt; '9')\r\n                    throw new InputMismatchException();\r\n                res *\= 10;\r\n                res +\= c - '0';\r\n                c \= read();\r\n            } while (\!isSpaceChar(c));\r\n            return res * sgn;\r\n        }\r\n\r\n        public boolean isSpaceChar(int c)\r\n        {\r\n            if (filter \!\= null)\r\n                return filter.isSpaceChar(c);\r\n            return c \=\= ' ' || c \=\= '\\n' || c \=\= '\\r' || c \=\= '\\t' || c \=\= -1;\r\n        }\r\n\r\n        public String next()\r\n        {\r\n            return readString();\r\n        }\r\n\r\n        public interface SpaceCharFilter\r\n        {\r\n            public boolean isSpaceChar(int ch);\r\n        }\r\n    }\r\n\r\n    private static class OutputWriter\r\n    {\r\n        private final PrintWriter writer;\r\n\r\n        public OutputWriter(OutputStream outputStream)\r\n        {\r\n            writer \= new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\r\n        }\r\n\r\n        public OutputWriter(Writer writer)\r\n        {\r\n            this.writer \= new PrintWriter(writer);\r\n        }\r\n\r\n        public void print(Object... objects)\r\n        {\r\n            for (int i \= 0; i &lt; objects.length; i++)\r\n            {\r\n                if (i \!\= 0)\r\n                    writer.print(' ');\r\n                writer.print(objects[i]);\r\n            }\r\n        }\r\n        \r\n        public void printLine(Object... objects)\r\n        {\r\n            print(objects);\r\n            writer.println();\r\n        }\r\n        public void close()\r\n        {\r\n            writer.close();\r\n        }\r\n\r\n        public void flush()\r\n        {\r\n            writer.flush();\r\n        }\r\n    }\r\n}</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\r\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\r\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\r\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\r\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\r\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\r\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>
